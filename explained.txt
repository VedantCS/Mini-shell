import java.io.File;
import java.io.IOException;
import java.util.Scanner;

public class MiniShell {

    // Stores the current working directory (initially the directory where the program was launched)
    static File currentDir = new File(System.getProperty("user.dir"));

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.println("Welcome to JavaShell!");
        System.out.println("Type 'help' to see commands, 'exit' to quit.");

        while (true) {
            System.out.print("> ");
            String input = scanner.nextLine().trim(); // Read user input and remove extra whitespace

            if (input.equals("exit")) break;                       // Exit the shell
            else if (input.equals("pwd")) printWorkingDirectory(); // Print current directory
            else if (input.equals("ls")) listFiles();              // List directory contents
            else if (input.startsWith("cd "))                      // Change directory
                changeDirectory(input.substring(3).trim());
            else if (input.startsWith("touch "))                   // Create new file
                createFile(input.substring(6).trim());
            else if (input.startsWith("rm "))                      // Delete file
                deleteFile(input.substring(3).trim());
            else if (input.equals("help")) showHelp();             // Show command help
            else System.out.println("Unknown command: " + input);  // Unrecognized input
        }

        scanner.close(); // Close scanner resource
        System.out.println("Goodbye!");
    }

    // Prints the full resolved path of the current working directory
    static void printWorkingDirectory() {
        try {
            // getCanonicalPath() returns the absolute path, resolving ".", "..", and symlinks & represents a single, real path on disk
System.out.println(currentDir.getCanonicalPath());//syntax: java.io.File.getCanonicalPath() throws IOException-> means io package me file class ka method hai 
        } catch (IOException e) {
            System.out.println("Error: Cannot get current directory.");
        }
    }

    // Lists all files and folders in the current working directory
    static void listFiles() {
        // listFiles() returns all files/directories in currentDir as File[]
        File[] files = currentDir.listFiles();//Returns an array of abstract pathnames denoting the files in thedirectory denoted by this abstract pathname 
//if no files found then returns null; Syntax: File[] java.io.File.listFiles()
        if (files == null) {
            System.out.println("Error: Cannot list files.");
            return;
        }

        for (File file : files) {
            // getName() returns just the file or folder name
            // isDirectory() checks if it's a folder (adds "/" at the end)
            System.out.println(file.getName() + (file.isDirectory() ? "/" : "")); //String java.io.File.getName
//boolean java.io.File.isDirectory() Tests whether the file denoted by this abstract pathname is a directory.
        }
    }

    // Changes current working directory to the one specified
    static void changeDirectory(String dirName) {
        // Creates a path relative to currentDir
        File newDir = new File(currentDir, dirName);
//new File(parent, child): This constructor creates a new File by combining the path of parent and child.
//currentDir: A File object representing the current working directory (e.g., /Users/you/projects).
//dirName: A String representing the name of a subdirectory (e.g., "src" or "..").
        
        
        

        // exists() checks if the path is real
        // isDirectory() ensures it's a folder, not a file
        if (newDir.exists() && newDir.isDirectory()) {//boolean java.io.File.exists()
//Tests whether the file or directory denoted by this  pathname exists.
            currentDir = newDir;
        } else {
            System.out.println("Directory not found: " + dirName);
        }
    }

    // Creates a new empty file in the current directory
    static void createFile(String fileName) {
        File file = new File(currentDir, fileName); // Path to the new file

        try {
            // createNewFile() tries to create a physical file, returns true if successful
            if (file.createNewFile()) { //syntax: boolean java.io.File.createNewFile() throws IOException 
//returns true if the named file does not exist and was successfully created; false if the named file already exists
                System.out.println("File created: " + fileName);
            } else {
                System.out.println("File already exists.");
            }
        } catch (IOException e) {
            System.out.println("Error creating file: " + fileName);
        }
    }

    // Deletes a file from the current directory
    static void deleteFile(String fileName) {
        File file = new File(currentDir, fileName); // Path to the file to delete

        // exists() checks if the file exists
        // isFile() makes sure it's a regular file (not a directory)
        if (!file.exists() || !file.isFile()) { //boolean java.io.File.isFile()
//Tests whether the file denoted by this  pathname is a normal file. A file is normal if it is not a directory
            System.out.println("File not found or is not a file: " + fileName);
            return;
        }

        // delete() removes the file from disk
        if (file.delete()) {//.delete() returns true if and only if the file or directory is successfully deleted; false otherwise
//Deletes the file or directory denoted by this  pathname.
        	System.out.println("Deleted: " + fileName);
        } else {
            System.out.println("Error deleting file.");
        }
    }

    // Displays help message listing all available commands
    static void showHelp() {
        System.out.println("Available commands:");
        System.out.println("pwd           - Show current directory");
        System.out.println("ls            - List contents of directory");
        System.out.println("cd <dir>      - Change directory");
        System.out.println("touch <file>  - Create new file");
        System.out.println("rm <file>     - Delete file");
        System.out.println("help          - Show this help");
        System.out.println("exit          - Exit the shell");
    }
}
